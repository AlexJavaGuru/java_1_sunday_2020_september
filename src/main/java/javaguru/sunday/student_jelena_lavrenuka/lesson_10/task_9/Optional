Класс Optional используется для хранения объекта,
чье значение может быть null (ошибка NullPointerException).

Класс Optional обладает схожими свойствами — при написании кода
разработчик часто не может знать — будет ли существовать нужный объект на момент исполнения
программы или нет, и в таких случаях приходится делать проверки на null.
Если такими проверками пренебречь, то рано или поздно (обычно рано) Ваша программа рухнет
с NullPointerException.

Класс Optional может содержать объект, а может содержать null.

Часто проверка на null объектов, которые передаются или обрабатываются в различных методах,
занимает множество строчек кода, если необходимо работать не только с переданным объектом,
а с полем объекта, которое в свою очередь содержит еще одно поле, к примеру текстового описания.
При попытке обратиться напрямую к этому полю через цепочку объектов и при условии,
что переданный объект по каким-то причинам пришел равный null мы получим NullPointerException,
поэтому для начала нам необходимо проверить каждый объект на null и
уже потом взять необходимое нам текстовое поле:


Cуществует всего три категории Optional:
 - Optional.of — возвращает Optional-объект.
 - Optional.ofNullable -возвращает Optional-объект, а если нет дженерик-объекта,
возвращает пустой Optional-объект.
 - Optional.empty — возвращает пустой Optional-объект.
Существует так же два метода, вытекающие из познания,
существует обёрнутый объект или нет — isPresent() и ifPresent();


Существует три прямых метода дальнейшего получения объекта семейства orElse();
Как следует из перевода, эти методы срабатывают в том случае,
если объекта в полученном Optional не нашлось.
orElse() — возвращает объект по дефолту даже и пустой.
orElseGet() — вызывает указанный метод (Если объект не найден,
Optional оставляет пространство для «Варианта Б» — Вы можете выполнить другой метод,
поискать в другом месте).
orElseThrow() — выбрасывает исключение ( мы можем получить объект или, если его нет,
выбросить исключение).

Работа с полученным объектом:
get() — возвращает объект, если он есть.
map() — преобразовывает объект в другой объект.
filter() — фильтрует содержащиеся объекты по предикату.
flatmap() — возвращает множество в виде стрима.